// Generated by CoffeeScript 1.3.3
(function() {
  'use strict';

  var Cell, Life, requestAnimFrame;

  requestAnimFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback, element) {
    return window.setTimeout(callback, 1000 / 60);
  };

  Cell = (function() {

    function Cell(isAlive) {
      this.isAlive = isAlive;
    }

    Cell.prototype.aliveNeighbours = function(xMid, yMid) {
      var alive, x, xMax, xMin, y, yMax, yMin, _i, _j;
      xMin = Math.max(xMid - 1, 0);
      yMin = Math.max(yMid - 1, 0);
      xMax = Math.min(xMid + 1, Life.width - 1);
      yMax = Math.min(yMid + 1, Life.height - 1);
      alive = 0;
      for (x = _i = xMin; xMin <= xMax ? _i <= xMax : _i >= xMax; x = xMin <= xMax ? ++_i : --_i) {
        for (y = _j = yMin; yMin <= yMax ? _j <= yMax : _j >= yMax; y = yMin <= yMax ? ++_j : --_j) {
          if ((x !== xMid || y !== yMid) && Life.board[x][y].isAlive) {
            if (alive === 3) {
              return 4;
            } else {
              ++alive;
            }
          }
        }
      }
      return alive;
    };

    Cell.prototype.nextState = function(x, y) {
      var neighbours;
      neighbours = this.aliveNeighbours(x, y);
      return neighbours === 3 || (this.isAlive && neighbours === 2);
    };

    return Cell;

  })();

  Life = {
    init: function(options) {
      var x, y, _i, _j, _ref, _ref1;
      options || (options = {});
      this.canvas = (document.getElementsByTagName('canvas'))[0];
      this.ctx = this.canvas.getContext('2d');
      this.canvas.width = document.documentElement.clientWidth;
      this.canvas.height = document.documentElement.clientHeight;
      this.pixelSize = options.pixelSize || 1;
      this.width = Math.floor(this.canvas.width / this.pixelSize);
      this.height = Math.floor(this.canvas.height / this.pixelSize);
      this.board = [];
      for (x = _i = 0, _ref = this.width; 0 <= _ref ? _i < _ref : _i > _ref; x = 0 <= _ref ? ++_i : --_i) {
        this.board[x] = [];
        for (y = _j = 0, _ref1 = this.height; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
          this.board[x][y] = new Cell(Math.floor(Math.random() * 2));
        }
      }
      this.setHandlers();
      return this.draw();
    },
    step: function() {
      var newBoard, x, y, _i, _j, _ref, _ref1;
      newBoard = [];
      for (x = _i = 0, _ref = this.width; 0 <= _ref ? _i < _ref : _i > _ref; x = 0 <= _ref ? ++_i : --_i) {
        newBoard[x] = [];
        for (y = _j = 0, _ref1 = this.height; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
          newBoard[x][y] = new Cell(this.board[x][y].nextState(x, y));
        }
      }
      return this.board = newBoard;
    },
    draw: function() {
      var x, xPixels, y, _i, _j, _ref, _ref1,
        _this = this;
      requestAnimFrame(function() {
        return _this.draw();
      });
      this.ctx.fillStyle = 'white';
      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
      this.ctx.fillStyle = 'black';
      for (x = _i = 0, _ref = this.width; 0 <= _ref ? _i < _ref : _i > _ref; x = 0 <= _ref ? ++_i : --_i) {
        xPixels = x * this.pixelSize;
        for (y = _j = 0, _ref1 = this.height; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
          if (this.board[x][y].isAlive) {
            this.ctx.fillRect(xPixels, y * this.pixelSize, this.pixelSize, this.pixelSize);
          }
        }
      }
      return this.step();
    },
    setHandlers: function() {
      var _this = this;
      return window.addEventListener('resize', function() {
        _this.canvas.width = document.documentElement.clientWidth;
        _this.canvas.height = document.documentElement.clientHeight;
        _this.width = Math.floor(_this.canvas.width / _this.pixelSize);
        return _this.height = Math.floor(_this.canvas.height / _this.pixelSize);
      });
    }
  };

  Life.init({
    pixelSize: 2
  });

}).call(this);
